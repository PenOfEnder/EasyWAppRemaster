---
import ClientRouter from "astro/components/ClientRouter.astro";
import brailleMap from "../../utils/brailleMap";
import "../../style/base.css";

import CustomLetter from "../../components/braille/custom-letter.astro";

import LogoCbtis from "../../components/logos/logo-cbtis.astro";
import LogoCaed from "../../components/logos/logo-caed.astro";
import IconSound from "../../components/icons/icon-sound.astro";

import IconLeftArrow from "../../components/icons/icon-left-arrow.astro";

const letters = Array.from({ length: 26 }, (_, i) =>
    String.fromCharCode(65 + i),
);

import { generateSpeech } from "../../utils/textToSpeech";
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Abecedario en braille</title>
        <!-- <ClientRouter /> -->
    </head>
    <body class="bg-gradient-generic flex flex-col items-center justify-center">
        <nav class="flex justify-around items-center w-full h-1/2 py-5">
            <a href="../" class="h-full flex justify-center"
            aria-label="Volver a la pagina principal"
            >
                <IconLeftArrow size="50%" color="#0B3441" />
            </a>
            <a
                href="https://cbtis212.online/"
                class="h-full justify-center hidden md:flex"
            aria-hidden="true"

            >
                <LogoCbtis size="50%" color="#0B3441" />
            </a>
            <div class="flex justify-center items-center w-full h-full">
                <h2 class="text-2xl lg:text-4xl c-title-text text-center text-[#0B3441]">
                    Abecedario de braille
                </h2>
            </div>
            <a href="" class="h-full hidden justify-center md:flex"
            aria-hidden="true"
            >
                <LogoCaed size="50%" color="#0B3441" />
            </a>
            <a href="../braille" class="h-full flex justify-center rotate-180"
            aria-label="Volver al menú de braille"
            >
                <IconLeftArrow size="50%" color="#0B3441" />
            </a>
        </nav>

        <main
            class="bg-[#EDFEFE80] h-5/6 w-6/7 max-h-[70%] rounded-[12.5px] flex flex-row flex-wrap justify-center items-center lg:grid grid-cols-6 grid-auto-rows gap-2"
        >
            {
                letters.map((letter: string) => {
                    const minusLetter = letter.toUpperCase();
                    return (
                        <article class="flex flex-col items-center p-5 "
                        aria-label={`Letra: ${minusLetter} `}
                        >
                            <CustomLetter letter={minusLetter} />
                            <button
                                class="flex justify-center items-center p-3 cursor-pointer animation-pulse"
                                data-letter={minusLetter}
                                aria-label={`Reproducir sonido para ${minusLetter}`}
                            >
                                <IconSound size="100px" color="#0B3441" class:list={"brightness-150"} />
                            </button>
                        </article>
                    );
                })
            }
        </main>
    </body>
</html>

<script>
    // Este script se ejecuta en el navegador
    import { generateSpeech } from "../../utils/textToSpeech";
    import brailleMap from "../../utils/brailleMap";

    // Obtener todos los botones de sonido
    const soundButtons = document.querySelectorAll("button[data-letter]");

    // Añadir evento click a cada botón
    soundButtons.forEach((button) => {
        button.addEventListener("click", async () => {
            const letter = button.getAttribute("data-letter");
            console.log("letra: "+letter);
            if (!letter) return;

            try {
                button.classList.add("loading");

                let text = `La letra ${letter} en Braille es: `;

                for (let i = 0; i < brailleMap[letter].length; i++) {
                    
                    if(i>2){
                        if(brailleMap[letter][i] > 0){
                            text += "Punto "+(i+1)+" ";
                        }
                    } else{
                        if(brailleMap[letter][i] > 0){
                            text += "Punto "+(i+1)+" "; 
                        }
                    }
                }

                // Generar y reproducir el audio

                const audioUrl = await generateSpeech(text, {
                    speed: 0.75,
                    similarity: 0.75,
                    voiceId: "zrHiDhphv9ZnVXBqCLjz",
                });
                if (audioUrl) {
                    const audio = new Audio(audioUrl);
                    await audio.play();
                }
            } catch (error) {
                console.error(
                    `Error al reproducir el sonido para ${letter}:`,
                    error,
                );
            } finally {
                // Restaurar apariencia del botón
                button.classList.remove("loading");
            }
        });
    });
</script>
