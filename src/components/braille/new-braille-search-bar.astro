---
import IconX from "../icons/icon-x.astro";
interface Props {
   placeholder: string;
   color: string;
   height?: string;
}
const { placeholder, color, height } = Astro.props;
---
<section class={`w-full rounded-[25px] px-4 bg-[${color}]`}>
   <form action="" class="flex justify-between font-xl h-full" id="searchForm">
       <input
           id="search-bar-input"
           type="text"
           class="h-full w-full text-3xl pl-2 placeholder:text-3xl outline-none"
           placeholder={placeholder}
       />
       <button
           id="button-x"
           type="reset"
           class="h-full p-4 cursor-pointer hidden"
       >
           <IconX size="40px" color="#0B3441" />
       </button>
       <button type="submit" class="h-auto flex justify-center items-center">
           <svg
               xmlns="http://www.w3.org/2000/svg"
               width="auto"
               height="60%"
               viewBox="0 0 24 24"
               ><path fill="#0B3441" d="m2 21l21-9L2 3v7l15 2l-15 2z"
               ></path></svg
           >
       </button>
   </form>
</section>
<script>
   addEventListener("DOMContentLoaded", () => {
       const $input = document.querySelector(
           "#search-bar-input",
       ) as HTMLInputElement;
       const $botonx = document.getElementById("button-x");
       $input?.addEventListener("input", () => {
           const input_value = $input.value;
           if (input_value.length > 0) $botonx?.classList.remove("hidden");
           else {
               $botonx?.classList.add("hidden");
           }
       });
   });
   document
       .querySelector("#searchForm")
       ?.addEventListener("submit", (e: Event) => submitForm(e));
   async function submitForm(e: Event) {
       e.preventDefault();
       console.log("hola");
       const inputBuscar = document.querySelector(
           "#search-bar-input",
       ) as HTMLInputElement | null;
       if (inputBuscar) {
           try {
               document.getElementById("loaderDiv")!.style.display = "flex";
               console.log("Si ves esto, andamos traduciendo");
               const wordSaved = inputBuscar.value;
               let tmp_array = [];
               for (let i = 0; i < wordSaved.length; i++) {
                   tmp_array.push(wordSaved[i]);
               }
               setTimeout(() => {
                       window.location.href = `/braille/traductor?word=${encodeURIComponent(wordSaved)}`;
                   }, 100); // Ajusta el tiempo si es necesario
           } catch (error) {
               document.getElementById("loaderDiv")!.style.display = "none";
               console.error("Error:", error);
           }
       }
   }
</script>