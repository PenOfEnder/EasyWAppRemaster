---
// BrailleTimeline.astro
// Importación del icono necesario
import IconNext from '../icons/icon-next.astro';
import IconPrevious from '../icons/icon-previous.astro';

// Props del componente
export interface Props {
  letters?: string;
  currentIndex?: number;
  onLetterChange?: (index: number) => void;
}


// Valores por defecto
const { 
  letters = "HOLA", 
  currentIndex = 0,
  onLetterChange 
} = Astro.props;

// En Astro no se puede usar estados directamente como en React
// Por lo que el componente debe ser controlado desde el exterior
---

<div class="w-full max-w-4xl mx-auto my-8" id="braille-timeline">
  <div class="relative w-full">
    <!-- Línea base -->
    <div class="h-1 bg-[#12b6c8] w-full absolute top-3"></div>

    <!-- Puntos y letras -->
    <div class="flex justify-between relative w-full">
      {Array.from(letters).map((letter, index) => (
        <div class="flex flex-col items-center">
          <button
            data-index={index}
            class:list={[
              "timeline-point w-6 h-6 rounded-full border-2 transition-all duration-300 flex items-center justify-center z-10",
              {
                "bg-[#1a4f5f] border-[#1a4f5f] text-white shadow-lg scale-125": index === currentIndex,
                "bg-[#1a4f5f] border-[#1a4f5f]": index < currentIndex,
                "bg-[#12b6c8] border-[#12b6c8]": index > currentIndex
              }
            ]}
            aria-label={`Ir a letra ${letter}`}
          >
            {index < currentIndex ? " " : ""}
          </button>

          <span 
            class:list={[
              "mt-2 text-sm font-medium",
              {
                "text-[#1a4f5f]": index === currentIndex,
                "text-[#12b6c8]": index !== currentIndex
              }
            ]}
          >
            {letter.toUpperCase()}
          </span>
        </div>
      ))}
    </div>

    <!-- Barra de progreso -->
    <div
      id="progress-bar"
      class="h-1 bg-[#1a4f5f] absolute top-3 transition-all duration-300"
      style={`width: ${(currentIndex / (letters.length - 1)) * 100}%; left: 0; right: 0;`}
    ></div>
  </div>

  <!-- Controles de navegación -->
  <div class="flex justify-between items-center mt-8">
    <button
      id="prev-button"
      disabled={currentIndex === 0}
      class:list={[
        "px-4 py-2 bg-[#EDFEFE] text-[#0B3441] rounded-lg flex justify-center group transition-colors hover:bg-[#0B3441] hover:text-[#EDFEFE]",
        { "opacity-50 cursor-not-allowed": currentIndex === 0 }
      ]}
      aria-label="Ir a letra anterior"
    >
      <IconPrevious />
    </button>

    <div
      id="counter-button"
      class="flex items-center bg-gray-100 px-4 py-2 rounded-lg cursor-pointer hover:bg-gray-200 transition-colors group"
    >
      <span class="text-[#1a4f5f] text-xl group-hover:text-[#0b3441] transition-colors">
        {currentIndex + 1} de {letters.length}
        {currentIndex === letters.length - 1 ? ' (Reiniciar)' : ' (Repetir)'}
      </span>
    </div>

    <button
      id="next-button"
      disabled={currentIndex === letters.length - 1}
      class:list={[
        "px-4 py-2 bg-[#EDFEFE] text-[#0B3441] rounded-lg flex justify-center group transition-colors hover:bg-[#0B3441] hover:text-[#EDFEFE]",
        { "opacity-50 cursor-not-allowed": currentIndex === letters.length - 1 }
      ]}
      aria-label="Ir a letra siguiente"
    >
      <IconNext />
    </button>
  </div>
</div>

<script>
  // Cliente-side JavaScript para manejar la interactividad
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('braille-timeline');
    if (!container) return;

    const letters = container.closest('[data-letters]')?.getAttribute('data-letters') || "HOLA";
    let activeIndex = parseInt(container.closest('[data-current-index]')?.getAttribute('data-current-index') || "0");
    
    const progressBar = container.querySelector('#progress-bar');
    const prevButton = container.querySelector('#prev-button');
    const nextButton = container.querySelector('#next-button');
    const counterButton = container.querySelector('#counter-button');
    const timelinePoints = container.querySelectorAll('.timeline-point');
    
    // Función para actualizar la interfaz visual
    const updateUI = (index) => {
      activeIndex = index;
      
      // Actualizar barra de progreso
      if (progressBar) {
        progressBar.style.width = `${(activeIndex / (letters.length - 1)) * 100}%`;
      }
      
      // Actualizar puntos y letras
      timelinePoints.forEach((point, i) => {
        if (i === activeIndex) {
          point.classList.add('bg-[#1a4f5f]', 'border-[#1a4f5f]', 'text-white', 'shadow-lg', 'scale-125');
          point.classList.remove('bg-[#12b6c8]', 'border-[#12b6c8]');
          point.nextElementSibling.classList.add('text-[#1a4f5f]');
          point.nextElementSibling.classList.remove('text-[#12b6c8]');
        } else if (i < activeIndex) {
          point.classList.add('bg-[#1a4f5f]', 'border-[#1a4f5f]');
          point.classList.remove('bg-[#12b6c8]', 'border-[#12b6c8]', 'text-white', 'shadow-lg', 'scale-125');
          point.nextElementSibling.classList.remove('text-[#1a4f5f]');
          point.nextElementSibling.classList.add('text-[#12b6c8]');
        } else {
          point.classList.add('bg-[#12b6c8]', 'border-[#12b6c8]');
          point.classList.remove('bg-[#1a4f5f]', 'border-[#1a4f5f]', 'text-white', 'shadow-lg', 'scale-125');
          point.nextElementSibling.classList.remove('text-[#1a4f5f]');
          point.nextElementSibling.classList.add('text-[#12b6c8]');
        }
      });
      
      // Actualizar estado de los botones
      if (prevButton) {
        prevButton.disabled = activeIndex === 0;
        if (activeIndex === 0) {
          prevButton.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
          prevButton.classList.remove('opacity-50', 'cursor-not-allowed');
        }
      }
      
      if (nextButton) {
        nextButton.disabled = activeIndex === letters.length - 1;
        if (activeIndex === letters.length - 1) {
          nextButton.classList.add('opacity-50', 'cursor-not-allowed');
        } else {
          nextButton.classList.remove('opacity-50', 'cursor-not-allowed');
        }
      }
      
      // Actualizar contador
      if (counterButton) {
        const counterText = counterButton.querySelector('span');
        if (counterText) {
          counterText.textContent = `${activeIndex + 1} de ${letters.length}${activeIndex === letters.length - 1 ? ' (Reiniciar)' : ' (Repetir)'}`;
        }
      }
      
      // Disparar evento para comunicar el cambio
      const event = new CustomEvent('letterchange', { 
        detail: { index: activeIndex, letter: letters[activeIndex] }
      });
      container.dispatchEvent(event);
    };
    
    // Configurar manejadores de eventos
    timelinePoints.forEach((point) => {
      point.addEventListener('click', () => {
        const index = parseInt(point.getAttribute('data-index') || "0");
        updateUI(index);
      });
    });
    
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        if (activeIndex > 0) {
          updateUI(activeIndex - 1);
        }
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        if (activeIndex < letters.length - 1) {
          updateUI(activeIndex + 1);
        }
      });
    }
    
    if (counterButton) {
      counterButton.addEventListener('click', () => {
        if (activeIndex < letters.length - 1) {
          // Si no está en la última letra, repite la letra actual
          updateUI(activeIndex);
        } else {
          // Si está en la última letra, reinicia la secuencia
          updateUI(0);
        }
      });
    }
    
    // Inicialización
    updateUI(activeIndex);
  });
</script>